// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  postAuth2FaDisable,
  postAuth2FaSetup,
  postAuth2FaVerify,
  postAuthLogin,
  putAuthPassword,
  postAuthRefresh,
  postAuthRegister,
  getMonitors,
  postMonitors,
  deleteMonitorsById,
  getMonitorsById,
  patchMonitorsById,
  putMonitorsById,
  getMonitorsByIdChartpoints,
  getMonitorsByIdHeartbeats,
  getMonitorsByIdUptime,
  getNotifications,
  postNotifications,
  deleteNotificationsById,
  getNotificationsById,
  patchNotificationsById,
  putNotificationsById,
  getProxies,
  postProxies,
  deleteProxiesById,
  getProxiesById,
  patchProxiesById,
  putProxiesById,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/react-query";
import type {
  PostAuth2FaDisableData,
  PostAuth2FaDisableError,
  PostAuth2FaDisableResponse,
  PostAuth2FaSetupData,
  PostAuth2FaSetupError,
  PostAuth2FaSetupResponse,
  PostAuth2FaVerifyData,
  PostAuth2FaVerifyError,
  PostAuth2FaVerifyResponse,
  PostAuthLoginData,
  PostAuthLoginError,
  PostAuthLoginResponse,
  PutAuthPasswordData,
  PutAuthPasswordError,
  PutAuthPasswordResponse,
  PostAuthRefreshData,
  PostAuthRefreshError,
  PostAuthRefreshResponse,
  PostAuthRegisterData,
  PostAuthRegisterError,
  PostAuthRegisterResponse,
  GetMonitorsData,
  GetMonitorsError,
  GetMonitorsResponse,
  PostMonitorsData,
  PostMonitorsError,
  PostMonitorsResponse,
  DeleteMonitorsByIdData,
  DeleteMonitorsByIdError,
  DeleteMonitorsByIdResponse,
  GetMonitorsByIdData,
  PatchMonitorsByIdData,
  PatchMonitorsByIdError,
  PatchMonitorsByIdResponse,
  PutMonitorsByIdData,
  PutMonitorsByIdError,
  PutMonitorsByIdResponse,
  GetMonitorsByIdChartpointsData,
  GetMonitorsByIdHeartbeatsData,
  GetMonitorsByIdHeartbeatsError,
  GetMonitorsByIdHeartbeatsResponse,
  GetMonitorsByIdUptimeData,
  GetNotificationsData,
  GetNotificationsError,
  GetNotificationsResponse,
  PostNotificationsData,
  PostNotificationsError,
  PostNotificationsResponse,
  DeleteNotificationsByIdData,
  DeleteNotificationsByIdError,
  DeleteNotificationsByIdResponse,
  GetNotificationsByIdData,
  PatchNotificationsByIdData,
  PatchNotificationsByIdError,
  PatchNotificationsByIdResponse,
  PutNotificationsByIdData,
  PutNotificationsByIdError,
  PutNotificationsByIdResponse,
  GetProxiesData,
  GetProxiesError,
  GetProxiesResponse,
  PostProxiesData,
  PostProxiesError,
  PostProxiesResponse,
  DeleteProxiesByIdData,
  DeleteProxiesByIdError,
  DeleteProxiesByIdResponse,
  GetProxiesByIdData,
  PatchProxiesByIdData,
  PatchProxiesByIdError,
  PatchProxiesByIdResponse,
  PutProxiesByIdData,
  PutProxiesByIdError,
  PutProxiesByIdResponse,
} from "../types.gen";
import type { AxiosError } from "axios";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const postAuth2FaDisableQueryKey = (
  options: Options<PostAuth2FaDisableData>,
) => createQueryKey("postAuth2FaDisable", options);

export const postAuth2FaDisableOptions = (
  options: Options<PostAuth2FaDisableData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuth2FaDisable({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuth2FaDisableQueryKey(options),
  });
};

export const postAuth2FaDisableMutation = (
  options?: Partial<Options<PostAuth2FaDisableData>>,
): UseMutationOptions<
  PostAuth2FaDisableResponse,
  AxiosError<PostAuth2FaDisableError>,
  Options<PostAuth2FaDisableData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuth2FaDisableResponse,
    AxiosError<PostAuth2FaDisableError>,
    Options<PostAuth2FaDisableData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuth2FaDisable({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuth2FaSetupQueryKey = (
  options: Options<PostAuth2FaSetupData>,
) => createQueryKey("postAuth2FaSetup", options);

export const postAuth2FaSetupOptions = (
  options: Options<PostAuth2FaSetupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuth2FaSetup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuth2FaSetupQueryKey(options),
  });
};

export const postAuth2FaSetupMutation = (
  options?: Partial<Options<PostAuth2FaSetupData>>,
): UseMutationOptions<
  PostAuth2FaSetupResponse,
  AxiosError<PostAuth2FaSetupError>,
  Options<PostAuth2FaSetupData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuth2FaSetupResponse,
    AxiosError<PostAuth2FaSetupError>,
    Options<PostAuth2FaSetupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuth2FaSetup({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuth2FaVerifyQueryKey = (
  options: Options<PostAuth2FaVerifyData>,
) => createQueryKey("postAuth2FaVerify", options);

export const postAuth2FaVerifyOptions = (
  options: Options<PostAuth2FaVerifyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuth2FaVerify({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuth2FaVerifyQueryKey(options),
  });
};

export const postAuth2FaVerifyMutation = (
  options?: Partial<Options<PostAuth2FaVerifyData>>,
): UseMutationOptions<
  PostAuth2FaVerifyResponse,
  AxiosError<PostAuth2FaVerifyError>,
  Options<PostAuth2FaVerifyData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuth2FaVerifyResponse,
    AxiosError<PostAuth2FaVerifyError>,
    Options<PostAuth2FaVerifyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuth2FaVerify({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthLoginQueryKey = (options: Options<PostAuthLoginData>) =>
  createQueryKey("postAuthLogin", options);

export const postAuthLoginOptions = (options: Options<PostAuthLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthLoginQueryKey(options),
  });
};

export const postAuthLoginMutation = (
  options?: Partial<Options<PostAuthLoginData>>,
): UseMutationOptions<
  PostAuthLoginResponse,
  AxiosError<PostAuthLoginError>,
  Options<PostAuthLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthLoginResponse,
    AxiosError<PostAuthLoginError>,
    Options<PostAuthLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putAuthPasswordMutation = (
  options?: Partial<Options<PutAuthPasswordData>>,
): UseMutationOptions<
  PutAuthPasswordResponse,
  AxiosError<PutAuthPasswordError>,
  Options<PutAuthPasswordData>
> => {
  const mutationOptions: UseMutationOptions<
    PutAuthPasswordResponse,
    AxiosError<PutAuthPasswordError>,
    Options<PutAuthPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putAuthPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthRefreshQueryKey = (
  options: Options<PostAuthRefreshData>,
) => createQueryKey("postAuthRefresh", options);

export const postAuthRefreshOptions = (
  options: Options<PostAuthRefreshData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRefresh({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRefreshQueryKey(options),
  });
};

export const postAuthRefreshMutation = (
  options?: Partial<Options<PostAuthRefreshData>>,
): UseMutationOptions<
  PostAuthRefreshResponse,
  AxiosError<PostAuthRefreshError>,
  Options<PostAuthRefreshData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRefreshResponse,
    AxiosError<PostAuthRefreshError>,
    Options<PostAuthRefreshData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRefresh({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAuthRegisterQueryKey = (
  options: Options<PostAuthRegisterData>,
) => createQueryKey("postAuthRegister", options);

export const postAuthRegisterOptions = (
  options: Options<PostAuthRegisterData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAuthRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAuthRegisterQueryKey(options),
  });
};

export const postAuthRegisterMutation = (
  options?: Partial<Options<PostAuthRegisterData>>,
): UseMutationOptions<
  PostAuthRegisterResponse,
  AxiosError<PostAuthRegisterError>,
  Options<PostAuthRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostAuthRegisterResponse,
    AxiosError<PostAuthRegisterError>,
    Options<PostAuthRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAuthRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMonitorsQueryKey = (options?: Options<GetMonitorsData>) =>
  createQueryKey("getMonitors", options);

export const getMonitorsOptions = (options?: Options<GetMonitorsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMonitors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMonitorsQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const getMonitorsInfiniteQueryKey = (
  options?: Options<GetMonitorsData>,
): QueryKey<Options<GetMonitorsData>> =>
  createQueryKey("getMonitors", options, true);

export const getMonitorsInfiniteOptions = (
  options?: Options<GetMonitorsData>,
) => {
  return infiniteQueryOptions<
    GetMonitorsResponse,
    AxiosError<GetMonitorsError>,
    InfiniteData<GetMonitorsResponse>,
    QueryKey<Options<GetMonitorsData>>,
    | number
    | Pick<
        QueryKey<Options<GetMonitorsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetMonitorsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getMonitors({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getMonitorsInfiniteQueryKey(options),
    },
  );
};

export const postMonitorsQueryKey = (options: Options<PostMonitorsData>) =>
  createQueryKey("postMonitors", options);

export const postMonitorsOptions = (options: Options<PostMonitorsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postMonitors({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMonitorsQueryKey(options),
  });
};

export const postMonitorsMutation = (
  options?: Partial<Options<PostMonitorsData>>,
): UseMutationOptions<
  PostMonitorsResponse,
  AxiosError<PostMonitorsError>,
  Options<PostMonitorsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostMonitorsResponse,
    AxiosError<PostMonitorsError>,
    Options<PostMonitorsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMonitors({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteMonitorsByIdMutation = (
  options?: Partial<Options<DeleteMonitorsByIdData>>,
): UseMutationOptions<
  DeleteMonitorsByIdResponse,
  AxiosError<DeleteMonitorsByIdError>,
  Options<DeleteMonitorsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteMonitorsByIdResponse,
    AxiosError<DeleteMonitorsByIdError>,
    Options<DeleteMonitorsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteMonitorsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMonitorsByIdQueryKey = (
  options: Options<GetMonitorsByIdData>,
) => createQueryKey("getMonitorsById", options);

export const getMonitorsByIdOptions = (
  options: Options<GetMonitorsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMonitorsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMonitorsByIdQueryKey(options),
  });
};

export const patchMonitorsByIdMutation = (
  options?: Partial<Options<PatchMonitorsByIdData>>,
): UseMutationOptions<
  PatchMonitorsByIdResponse,
  AxiosError<PatchMonitorsByIdError>,
  Options<PatchMonitorsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchMonitorsByIdResponse,
    AxiosError<PatchMonitorsByIdError>,
    Options<PatchMonitorsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchMonitorsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putMonitorsByIdMutation = (
  options?: Partial<Options<PutMonitorsByIdData>>,
): UseMutationOptions<
  PutMonitorsByIdResponse,
  AxiosError<PutMonitorsByIdError>,
  Options<PutMonitorsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutMonitorsByIdResponse,
    AxiosError<PutMonitorsByIdError>,
    Options<PutMonitorsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putMonitorsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMonitorsByIdChartpointsQueryKey = (
  options: Options<GetMonitorsByIdChartpointsData>,
) => createQueryKey("getMonitorsByIdChartpoints", options);

export const getMonitorsByIdChartpointsOptions = (
  options: Options<GetMonitorsByIdChartpointsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMonitorsByIdChartpoints({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMonitorsByIdChartpointsQueryKey(options),
  });
};

export const getMonitorsByIdHeartbeatsQueryKey = (
  options: Options<GetMonitorsByIdHeartbeatsData>,
) => createQueryKey("getMonitorsByIdHeartbeats", options);

export const getMonitorsByIdHeartbeatsOptions = (
  options: Options<GetMonitorsByIdHeartbeatsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMonitorsByIdHeartbeats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMonitorsByIdHeartbeatsQueryKey(options),
  });
};

export const getMonitorsByIdHeartbeatsInfiniteQueryKey = (
  options: Options<GetMonitorsByIdHeartbeatsData>,
): QueryKey<Options<GetMonitorsByIdHeartbeatsData>> =>
  createQueryKey("getMonitorsByIdHeartbeats", options, true);

export const getMonitorsByIdHeartbeatsInfiniteOptions = (
  options: Options<GetMonitorsByIdHeartbeatsData>,
) => {
  return infiniteQueryOptions<
    GetMonitorsByIdHeartbeatsResponse,
    AxiosError<GetMonitorsByIdHeartbeatsError>,
    InfiniteData<GetMonitorsByIdHeartbeatsResponse>,
    QueryKey<Options<GetMonitorsByIdHeartbeatsData>>,
    | number
    | Pick<
        QueryKey<Options<GetMonitorsByIdHeartbeatsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetMonitorsByIdHeartbeatsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getMonitorsByIdHeartbeats({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getMonitorsByIdHeartbeatsInfiniteQueryKey(options),
    },
  );
};

export const getMonitorsByIdUptimeQueryKey = (
  options: Options<GetMonitorsByIdUptimeData>,
) => createQueryKey("getMonitorsByIdUptime", options);

export const getMonitorsByIdUptimeOptions = (
  options: Options<GetMonitorsByIdUptimeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMonitorsByIdUptime({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMonitorsByIdUptimeQueryKey(options),
  });
};

export const getNotificationsQueryKey = (
  options?: Options<GetNotificationsData>,
) => createQueryKey("getNotifications", options);

export const getNotificationsOptions = (
  options?: Options<GetNotificationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getNotifications({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getNotificationsQueryKey(options),
  });
};

export const getNotificationsInfiniteQueryKey = (
  options?: Options<GetNotificationsData>,
): QueryKey<Options<GetNotificationsData>> =>
  createQueryKey("getNotifications", options, true);

export const getNotificationsInfiniteOptions = (
  options?: Options<GetNotificationsData>,
) => {
  return infiniteQueryOptions<
    GetNotificationsResponse,
    AxiosError<GetNotificationsError>,
    InfiniteData<GetNotificationsResponse>,
    QueryKey<Options<GetNotificationsData>>,
    | number
    | Pick<
        QueryKey<Options<GetNotificationsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetNotificationsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getNotifications({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getNotificationsInfiniteQueryKey(options),
    },
  );
};

export const postNotificationsQueryKey = (
  options: Options<PostNotificationsData>,
) => createQueryKey("postNotifications", options);

export const postNotificationsOptions = (
  options: Options<PostNotificationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postNotifications({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postNotificationsQueryKey(options),
  });
};

export const postNotificationsMutation = (
  options?: Partial<Options<PostNotificationsData>>,
): UseMutationOptions<
  PostNotificationsResponse,
  AxiosError<PostNotificationsError>,
  Options<PostNotificationsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostNotificationsResponse,
    AxiosError<PostNotificationsError>,
    Options<PostNotificationsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postNotifications({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteNotificationsByIdMutation = (
  options?: Partial<Options<DeleteNotificationsByIdData>>,
): UseMutationOptions<
  DeleteNotificationsByIdResponse,
  AxiosError<DeleteNotificationsByIdError>,
  Options<DeleteNotificationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteNotificationsByIdResponse,
    AxiosError<DeleteNotificationsByIdError>,
    Options<DeleteNotificationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteNotificationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getNotificationsByIdQueryKey = (
  options: Options<GetNotificationsByIdData>,
) => createQueryKey("getNotificationsById", options);

export const getNotificationsByIdOptions = (
  options: Options<GetNotificationsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getNotificationsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getNotificationsByIdQueryKey(options),
  });
};

export const patchNotificationsByIdMutation = (
  options?: Partial<Options<PatchNotificationsByIdData>>,
): UseMutationOptions<
  PatchNotificationsByIdResponse,
  AxiosError<PatchNotificationsByIdError>,
  Options<PatchNotificationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchNotificationsByIdResponse,
    AxiosError<PatchNotificationsByIdError>,
    Options<PatchNotificationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchNotificationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putNotificationsByIdMutation = (
  options?: Partial<Options<PutNotificationsByIdData>>,
): UseMutationOptions<
  PutNotificationsByIdResponse,
  AxiosError<PutNotificationsByIdError>,
  Options<PutNotificationsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutNotificationsByIdResponse,
    AxiosError<PutNotificationsByIdError>,
    Options<PutNotificationsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putNotificationsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProxiesQueryKey = (options?: Options<GetProxiesData>) =>
  createQueryKey("getProxies", options);

export const getProxiesOptions = (options?: Options<GetProxiesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProxies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProxiesQueryKey(options),
  });
};

export const getProxiesInfiniteQueryKey = (
  options?: Options<GetProxiesData>,
): QueryKey<Options<GetProxiesData>> =>
  createQueryKey("getProxies", options, true);

export const getProxiesInfiniteOptions = (
  options?: Options<GetProxiesData>,
) => {
  return infiniteQueryOptions<
    GetProxiesResponse,
    AxiosError<GetProxiesError>,
    InfiniteData<GetProxiesResponse>,
    QueryKey<Options<GetProxiesData>>,
    | number
    | Pick<
        QueryKey<Options<GetProxiesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetProxiesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getProxies({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getProxiesInfiniteQueryKey(options),
    },
  );
};

export const postProxiesQueryKey = (options: Options<PostProxiesData>) =>
  createQueryKey("postProxies", options);

export const postProxiesOptions = (options: Options<PostProxiesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProxies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProxiesQueryKey(options),
  });
};

export const postProxiesMutation = (
  options?: Partial<Options<PostProxiesData>>,
): UseMutationOptions<
  PostProxiesResponse,
  AxiosError<PostProxiesError>,
  Options<PostProxiesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostProxiesResponse,
    AxiosError<PostProxiesError>,
    Options<PostProxiesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProxies({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteProxiesByIdMutation = (
  options?: Partial<Options<DeleteProxiesByIdData>>,
): UseMutationOptions<
  DeleteProxiesByIdResponse,
  AxiosError<DeleteProxiesByIdError>,
  Options<DeleteProxiesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteProxiesByIdResponse,
    AxiosError<DeleteProxiesByIdError>,
    Options<DeleteProxiesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProxiesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProxiesByIdQueryKey = (options: Options<GetProxiesByIdData>) =>
  createQueryKey("getProxiesById", options);

export const getProxiesByIdOptions = (options: Options<GetProxiesByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProxiesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProxiesByIdQueryKey(options),
  });
};

export const patchProxiesByIdMutation = (
  options?: Partial<Options<PatchProxiesByIdData>>,
): UseMutationOptions<
  PatchProxiesByIdResponse,
  AxiosError<PatchProxiesByIdError>,
  Options<PatchProxiesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PatchProxiesByIdResponse,
    AxiosError<PatchProxiesByIdError>,
    Options<PatchProxiesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProxiesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putProxiesByIdMutation = (
  options?: Partial<Options<PutProxiesByIdData>>,
): UseMutationOptions<
  PutProxiesByIdResponse,
  AxiosError<PutProxiesByIdError>,
  Options<PutProxiesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PutProxiesByIdResponse,
    AxiosError<PutProxiesByIdError>,
    Options<PutProxiesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putProxiesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
