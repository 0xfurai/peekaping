// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-axios";
import type {
  PostAuth2FaDisableData,
  PostAuth2FaDisableResponse,
  PostAuth2FaDisableError,
  PostAuth2FaSetupData,
  PostAuth2FaSetupResponse,
  PostAuth2FaSetupError,
  PostAuth2FaVerifyData,
  PostAuth2FaVerifyResponse,
  PostAuth2FaVerifyError,
  PostAuthLoginData,
  PostAuthLoginResponse,
  PostAuthLoginError,
  PutAuthPasswordData,
  PutAuthPasswordResponse,
  PutAuthPasswordError,
  PostAuthRefreshData,
  PostAuthRefreshResponse,
  PostAuthRefreshError,
  PostAuthRegisterData,
  PostAuthRegisterResponse,
  PostAuthRegisterError,
  GetMonitorsData,
  GetMonitorsResponse,
  GetMonitorsError,
  PostMonitorsData,
  PostMonitorsResponse,
  PostMonitorsError,
  DeleteMonitorsByIdData,
  DeleteMonitorsByIdResponse,
  DeleteMonitorsByIdError,
  GetMonitorsByIdData,
  GetMonitorsByIdResponse,
  GetMonitorsByIdError,
  PatchMonitorsByIdData,
  PatchMonitorsByIdResponse,
  PatchMonitorsByIdError,
  PutMonitorsByIdData,
  PutMonitorsByIdResponse,
  PutMonitorsByIdError,
  GetMonitorsByIdChartpointsData,
  GetMonitorsByIdChartpointsResponse,
  GetMonitorsByIdChartpointsError,
  GetMonitorsByIdHeartbeatsData,
  GetMonitorsByIdHeartbeatsResponse,
  GetMonitorsByIdHeartbeatsError,
  GetMonitorsByIdUptimeData,
  GetMonitorsByIdUptimeResponse,
  GetMonitorsByIdUptimeError,
  GetNotificationsData,
  GetNotificationsResponse,
  GetNotificationsError,
  PostNotificationsData,
  PostNotificationsResponse,
  PostNotificationsError,
  DeleteNotificationsByIdData,
  DeleteNotificationsByIdResponse,
  DeleteNotificationsByIdError,
  GetNotificationsByIdData,
  GetNotificationsByIdResponse,
  GetNotificationsByIdError,
  PatchNotificationsByIdData,
  PatchNotificationsByIdResponse,
  PatchNotificationsByIdError,
  PutNotificationsByIdData,
  PutNotificationsByIdResponse,
  PutNotificationsByIdError,
  GetProxiesData,
  GetProxiesResponse,
  GetProxiesError,
  PostProxiesData,
  PostProxiesResponse,
  PostProxiesError,
  DeleteProxiesByIdData,
  DeleteProxiesByIdResponse,
  DeleteProxiesByIdError,
  GetProxiesByIdData,
  GetProxiesByIdResponse,
  GetProxiesByIdError,
  PatchProxiesByIdData,
  PatchProxiesByIdResponse,
  PatchProxiesByIdError,
  PutProxiesByIdData,
  PutProxiesByIdResponse,
  PutProxiesByIdError,
  DeleteSettingsKeyByKeyData,
  DeleteSettingsKeyByKeyResponse,
  DeleteSettingsKeyByKeyError,
  GetSettingsKeyByKeyData,
  GetSettingsKeyByKeyResponse,
  GetSettingsKeyByKeyError,
  PutSettingsKeyByKeyData,
  PutSettingsKeyByKeyResponse,
  PutSettingsKeyByKeyError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Disable 2FA (TOTP) for user
 */
export const postAuth2FaDisable = <ThrowOnError extends boolean = false>(
  options: Options<PostAuth2FaDisableData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuth2FaDisableResponse,
    PostAuth2FaDisableError,
    ThrowOnError
  >({
    url: "/auth/2fa/disable",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Enable 2FA (TOTP) for user
 */
export const postAuth2FaSetup = <ThrowOnError extends boolean = false>(
  options: Options<PostAuth2FaSetupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuth2FaSetupResponse,
    PostAuth2FaSetupError,
    ThrowOnError
  >({
    url: "/auth/2fa/setup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Verify 2FA (TOTP) code for user
 */
export const postAuth2FaVerify = <ThrowOnError extends boolean = false>(
  options: Options<PostAuth2FaVerifyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuth2FaVerifyResponse,
    PostAuth2FaVerifyError,
    ThrowOnError
  >({
    url: "/auth/2fa/verify",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Login admin
 */
export const postAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthLoginResponse,
    PostAuthLoginError,
    ThrowOnError
  >({
    url: "/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update user password
 */
export const putAuthPassword = <ThrowOnError extends boolean = false>(
  options: Options<PutAuthPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutAuthPasswordResponse,
    PutAuthPasswordError,
    ThrowOnError
  >({
    url: "/auth/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Refresh access token
 */
export const postAuthRefresh = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRefreshData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRefreshResponse,
    PostAuthRefreshError,
    ThrowOnError
  >({
    url: "/auth/refresh",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Register new admin
 */
export const postAuthRegister = <ThrowOnError extends boolean = false>(
  options: Options<PostAuthRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostAuthRegisterResponse,
    PostAuthRegisterError,
    ThrowOnError
  >({
    url: "/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get monitors
 */
export const getMonitors = <ThrowOnError extends boolean = false>(
  options?: Options<GetMonitorsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMonitorsResponse,
    GetMonitorsError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors",
    ...options,
  });
};

/**
 * Create monitor
 */
export const postMonitors = <ThrowOnError extends boolean = false>(
  options: Options<PostMonitorsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostMonitorsResponse,
    PostMonitorsError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete monitor
 */
export const deleteMonitorsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMonitorsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteMonitorsByIdResponse,
    DeleteMonitorsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors/{id}",
    ...options,
  });
};

/**
 * Get monitor by ID
 */
export const getMonitorsById = <ThrowOnError extends boolean = false>(
  options: Options<GetMonitorsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMonitorsByIdResponse,
    GetMonitorsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors/{id}",
    ...options,
  });
};

/**
 * Update monitor
 */
export const patchMonitorsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchMonitorsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchMonitorsByIdResponse,
    PatchMonitorsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update monitor
 */
export const putMonitorsById = <ThrowOnError extends boolean = false>(
  options: Options<PutMonitorsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutMonitorsByIdResponse,
    PutMonitorsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get monitor chart points
 */
export const getMonitorsByIdChartpoints = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetMonitorsByIdChartpointsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMonitorsByIdChartpointsResponse,
    GetMonitorsByIdChartpointsError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors/{id}/chartpoints",
    ...options,
  });
};

/**
 * Get paginated heartbeats for a monitor
 */
export const getMonitorsByIdHeartbeats = <ThrowOnError extends boolean = false>(
  options: Options<GetMonitorsByIdHeartbeatsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMonitorsByIdHeartbeatsResponse,
    GetMonitorsByIdHeartbeatsError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors/{id}/heartbeats",
    ...options,
  });
};

/**
 * Get monitor uptime stats (24h, 7d, 30d, 365d)
 */
export const getMonitorsByIdUptime = <ThrowOnError extends boolean = false>(
  options: Options<GetMonitorsByIdUptimeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetMonitorsByIdUptimeResponse,
    GetMonitorsByIdUptimeError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/monitors/{id}/uptime",
    ...options,
  });
};

/**
 * Get notifications
 */
export const getNotifications = <ThrowOnError extends boolean = false>(
  options?: Options<GetNotificationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetNotificationsResponse,
    GetNotificationsError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/notifications",
    ...options,
  });
};

/**
 * Create notification
 */
export const postNotifications = <ThrowOnError extends boolean = false>(
  options: Options<PostNotificationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostNotificationsResponse,
    PostNotificationsError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/notifications",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete notification
 */
export const deleteNotificationsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteNotificationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteNotificationsByIdResponse,
    DeleteNotificationsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/notifications/{id}",
    ...options,
  });
};

/**
 * Get notification by ID
 */
export const getNotificationsById = <ThrowOnError extends boolean = false>(
  options: Options<GetNotificationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetNotificationsByIdResponse,
    GetNotificationsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/notifications/{id}",
    ...options,
  });
};

/**
 * Update notification
 */
export const patchNotificationsById = <ThrowOnError extends boolean = false>(
  options: Options<PatchNotificationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchNotificationsByIdResponse,
    PatchNotificationsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/notifications/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update notification
 */
export const putNotificationsById = <ThrowOnError extends boolean = false>(
  options: Options<PutNotificationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutNotificationsByIdResponse,
    PutNotificationsByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/notifications/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get proxies
 */
export const getProxies = <ThrowOnError extends boolean = false>(
  options?: Options<GetProxiesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProxiesResponse,
    GetProxiesError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/proxies",
    ...options,
  });
};

/**
 * Create proxy
 */
export const postProxies = <ThrowOnError extends boolean = false>(
  options: Options<PostProxiesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostProxiesResponse,
    PostProxiesError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/proxies",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete proxy
 */
export const deleteProxiesById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProxiesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProxiesByIdResponse,
    DeleteProxiesByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/proxies/{id}",
    ...options,
  });
};

/**
 * Get proxy by ID
 */
export const getProxiesById = <ThrowOnError extends boolean = false>(
  options: Options<GetProxiesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetProxiesByIdResponse,
    GetProxiesByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/proxies/{id}",
    ...options,
  });
};

/**
 * Update proxy
 */
export const patchProxiesById = <ThrowOnError extends boolean = false>(
  options: Options<PatchProxiesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    PatchProxiesByIdResponse,
    PatchProxiesByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/proxies/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update proxy
 */
export const putProxiesById = <ThrowOnError extends boolean = false>(
  options: Options<PutProxiesByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutProxiesByIdResponse,
    PutProxiesByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/proxies/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete setting by key
 */
export const deleteSettingsKeyByKey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSettingsKeyByKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteSettingsKeyByKeyResponse,
    DeleteSettingsKeyByKeyError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/settings/key/{key}",
    ...options,
  });
};

/**
 * Get setting by key
 */
export const getSettingsKeyByKey = <ThrowOnError extends boolean = false>(
  options: Options<GetSettingsKeyByKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetSettingsKeyByKeyResponse,
    GetSettingsKeyByKeyError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/settings/key/{key}",
    ...options,
  });
};

/**
 * Set setting by key
 */
export const putSettingsKeyByKey = <ThrowOnError extends boolean = false>(
  options: Options<PutSettingsKeyByKeyData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutSettingsKeyByKeyResponse,
    PutSettingsKeyByKeyError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/settings/key/{key}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
