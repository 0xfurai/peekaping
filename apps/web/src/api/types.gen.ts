// This file is auto-generated by @hey-api/openapi-ts

export type AuthLoginDto = {
  email?: string;
  password?: string;
  token?: string;
};

export type AuthLoginResponse = {
  accessToken?: string;
  refreshToken?: string;
  user?: AuthModel;
};

export type AuthModel = {
  active?: boolean;
  createdAt?: string;
  email?: string;
  id?: string;
  twofa_last_token?: string;
  twofa_secret?: string;
  twofa_status?: boolean;
  updatedAt?: string;
};

export type AuthRefreshTokenDto = {
  refreshToken?: string;
};

export type AuthRegisterDto = {
  email?: string;
  password?: string;
};

/**
 * TwoFADisableRequestDto is used to request 2FA disable
 */
export type AuthTwoFaDisableRequestDto = {
  email?: string;
  password?: string;
};

/**
 * TwoFASetupRequestDto is used to request 2FA setup
 */
export type AuthTwoFaSetupRequestDto = {
  email?: string;
  password?: string;
};

/**
 * TwoFASetupResponseDto is used to respond with 2FA setup info
 */
export type AuthTwoFaSetupResponseDto = {
  provisioningUri?: string;
  secret?: string;
};

/**
 * TwoFAVerifyRequestDto is used to verify a TOTP code
 */
export type AuthTwoFaVerifyRequestDto = {
  code?: string;
  email?: string;
};

export type AuthTwoFaVerifyResponseDto = {
  message?: string;
  success?: boolean;
};

/**
 * UpdatePasswordDto is used for updating user password
 */
export type AuthUpdatePasswordDto = {
  currentPassword?: string;
  newPassword?: string;
};

export type HeartbeatChartPoint = {
  avgPing?: number;
  down?: number;
  maxPing?: number;
  minPing?: number;
  timestamp?: number;
  up?: number;
};

export type HeartbeatModel = {
  down_count?: number;
  duration?: number;
  end_time?: string;
  id?: string;
  important?: boolean;
  monitor_id?: string;
  msg?: string;
  notified?: boolean;
  ping?: number;
  retries?: number;
  status?: HeartbeatMonitorStatus;
  time?: string;
};

export type HeartbeatMonitorStatus = 0 | 1 | 2 | 3;

export type MonitorCreateUpdateDto = {
  active?: boolean;
  config?: string;
  interval?: number;
  max_retries?: number;
  name: string;
  notification_ids: Array<string>;
  proxy_id?: string;
  resend_interval?: number;
  retry_interval?: number;
  timeout?: number;
  type: string;
};

export type MonitorModel = {
  active?: boolean;
  config?: string;
  created_at?: string;
  id?: string;
  /**
   * monitor interval in seconds to do request to url
   */
  interval?: number;
  /**
   * Maximum retries before the service is marked as down and a notification is sent
   */
  max_retries?: number;
  /**
   * monitor name
   */
  name?: string;
  proxy_id?: string;
  /**
   * Resend Notification if Down X times consecutively
   */
  resend_interval?: number;
  /**
   * Retry interval in seconds to do request to url
   */
  retry_interval?: number;
  status?: HeartbeatMonitorStatus;
  /**
   * monitor timeout in seconds to do request otherwise stop request
   */
  timeout?: number;
  /**
   * connection type: http, etc
   */
  type: "http";
  updated_at?: string;
};

export type MonitorMonitorResponseDto = {
  active?: boolean;
  config?: string;
  created_at?: string;
  id?: string;
  interval?: number;
  max_retries?: number;
  name?: string;
  notification_ids?: Array<string>;
  proxy_id?: string;
  resend_interval?: number;
  retry_interval?: number;
  status?: number;
  timeout?: number;
  type?: string;
  updated_at?: string;
};

export type MonitorPartialUpdateDto = {
  active?: boolean;
  config?: string;
  interval?: number;
  max_retries?: number;
  name?: string;
  notification_ids?: Array<string>;
  proxy_id?: string;
  resend_interval?: number;
  retry_interval?: number;
  status?: HeartbeatMonitorStatus;
  timeout?: number;
  type?: string;
};

export type MonitorUptimeStatsDto = {
  "24h"?: number;
  "30d"?: number;
  "365d"?: number;
  "7d"?: number;
};

export type NotificationCreateUpdateDto = {
  active?: boolean;
  config?: string;
  is_default?: boolean;
  name?: string;
  type?: string;
};

export type NotificationModel = {
  active?: boolean;
  config?: string;
  id?: string;
  is_default?: boolean;
  name?: string;
  type?: string;
};

export type NotificationPartialUpdateDto = {
  active?: boolean;
  config?: string;
  is_default?: boolean;
  name?: string;
  type?: string;
};

export type ProxyCreateUpdateDto = {
  auth?: boolean;
  host: string;
  password?: string;
  port: number;
  protocol: "http" | "https" | "socks" | "socks4" | "socks5" | "socks5h";
  username?: string;
};

export type ProxyModel = {
  auth?: boolean;
  createdDate?: string;
  host?: string;
  id?: string;
  password?: string;
  port?: number;
  protocol?: string;
  updatedAt?: string;
  username?: string;
};

export type ProxyPartialUpdateDto = {
  auth?: boolean;
  host?: string;
  password?: string;
  port?: number;
  protocol?: "http" | "https" | "socks" | "socks4" | "socks5" | "socks5h";
  username?: string;
};

export type UtilsApiError = {
  message?: string;
  status?: string;
};

export type UtilsApiResponseAny = {
  data?: unknown;
  message?: string;
};

export type UtilsApiResponseArrayHeartbeatChartPoint = {
  data?: Array<HeartbeatChartPoint>;
  message?: string;
};

export type UtilsApiResponseArrayHeartbeatModel = {
  data?: Array<HeartbeatModel>;
  message?: string;
};

export type UtilsApiResponseArrayMonitorModel = {
  data?: Array<MonitorModel>;
  message?: string;
};

export type UtilsApiResponseArrayNotificationModel = {
  data?: Array<NotificationModel>;
  message?: string;
};

export type UtilsApiResponseArrayProxyModel = {
  data?: Array<ProxyModel>;
  message?: string;
};

export type UtilsApiResponseAuthLoginResponse = {
  data?: AuthLoginResponse;
  message?: string;
};

export type UtilsApiResponseMonitorModel = {
  data?: MonitorModel;
  message?: string;
};

export type UtilsApiResponseMonitorMonitorResponseDto = {
  data?: MonitorMonitorResponseDto;
  message?: string;
};

export type UtilsApiResponseMonitorUptimeStatsDto = {
  data?: MonitorUptimeStatsDto;
  message?: string;
};

export type UtilsApiResponseNotificationModel = {
  data?: NotificationModel;
  message?: string;
};

export type UtilsApiResponseProxyModel = {
  data?: ProxyModel;
  message?: string;
};

export type PostAuth2FaDisableData = {
  /**
   * 2FA disable request
   */
  body: AuthTwoFaDisableRequestDto;
  path?: never;
  query?: never;
  url: "/auth/2fa/disable";
};

export type PostAuth2FaDisableErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostAuth2FaDisableError =
  PostAuth2FaDisableErrors[keyof PostAuth2FaDisableErrors];

export type PostAuth2FaDisableResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseAny;
};

export type PostAuth2FaDisableResponse =
  PostAuth2FaDisableResponses[keyof PostAuth2FaDisableResponses];

export type PostAuth2FaSetupData = {
  /**
   * 2FA setup request
   */
  body: AuthTwoFaSetupRequestDto;
  path?: never;
  query?: never;
  url: "/auth/2fa/setup";
};

export type PostAuth2FaSetupErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostAuth2FaSetupError =
  PostAuth2FaSetupErrors[keyof PostAuth2FaSetupErrors];

export type PostAuth2FaSetupResponses = {
  /**
   * OK
   */
  200: AuthTwoFaSetupResponseDto;
};

export type PostAuth2FaSetupResponse =
  PostAuth2FaSetupResponses[keyof PostAuth2FaSetupResponses];

export type PostAuth2FaVerifyData = {
  /**
   * 2FA verify request
   */
  body: AuthTwoFaVerifyRequestDto;
  path?: never;
  query?: never;
  url: "/auth/2fa/verify";
};

export type PostAuth2FaVerifyErrors = {
  /**
   * Bad Request
   */
  400: AuthTwoFaVerifyResponseDto;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostAuth2FaVerifyError =
  PostAuth2FaVerifyErrors[keyof PostAuth2FaVerifyErrors];

export type PostAuth2FaVerifyResponses = {
  /**
   * OK
   */
  200: AuthTwoFaVerifyResponseDto;
};

export type PostAuth2FaVerifyResponse =
  PostAuth2FaVerifyResponses[keyof PostAuth2FaVerifyResponses];

export type PostAuthLoginData = {
  /**
   * Login data
   */
  body: AuthLoginDto;
  path?: never;
  query?: never;
  url: "/auth/login";
};

export type PostAuthLoginErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostAuthLoginError = PostAuthLoginErrors[keyof PostAuthLoginErrors];

export type PostAuthLoginResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseAuthLoginResponse;
};

export type PostAuthLoginResponse =
  PostAuthLoginResponses[keyof PostAuthLoginResponses];

export type PutAuthPasswordData = {
  /**
   * Password update data
   */
  body: AuthUpdatePasswordDto;
  path?: never;
  query?: never;
  url: "/auth/password";
};

export type PutAuthPasswordErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Unauthorized
   */
  401: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PutAuthPasswordError =
  PutAuthPasswordErrors[keyof PutAuthPasswordErrors];

export type PutAuthPasswordResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseAny;
};

export type PutAuthPasswordResponse =
  PutAuthPasswordResponses[keyof PutAuthPasswordResponses];

export type PostAuthRefreshData = {
  /**
   * Refresh token data
   */
  body: AuthRefreshTokenDto;
  path?: never;
  query?: never;
  url: "/auth/refresh";
};

export type PostAuthRefreshErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Unauthorized
   */
  401: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostAuthRefreshError =
  PostAuthRefreshErrors[keyof PostAuthRefreshErrors];

export type PostAuthRefreshResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseAuthLoginResponse;
};

export type PostAuthRefreshResponse =
  PostAuthRefreshResponses[keyof PostAuthRefreshResponses];

export type PostAuthRegisterData = {
  /**
   * Registration data
   */
  body: AuthRegisterDto;
  path?: never;
  query?: never;
  url: "/auth/register";
};

export type PostAuthRegisterErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostAuthRegisterError =
  PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
  /**
   * Created
   */
  201: UtilsApiResponseAuthLoginResponse;
};

export type PostAuthRegisterResponse =
  PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type GetMonitorsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Search query
     */
    q?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Items per page
     */
    limit?: number;
    /**
     * Active status
     */
    active?: boolean;
    /**
     * Status
     */
    status?: number;
  };
  url: "/monitors";
};

export type GetMonitorsErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetMonitorsError = GetMonitorsErrors[keyof GetMonitorsErrors];

export type GetMonitorsResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseArrayMonitorModel;
};

export type GetMonitorsResponse =
  GetMonitorsResponses[keyof GetMonitorsResponses];

export type PostMonitorsData = {
  /**
   * Monitor object
   */
  body: MonitorCreateUpdateDto;
  path?: never;
  query?: never;
  url: "/monitors";
};

export type PostMonitorsErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostMonitorsError = PostMonitorsErrors[keyof PostMonitorsErrors];

export type PostMonitorsResponses = {
  /**
   * Created
   */
  201: UtilsApiResponseMonitorModel;
};

export type PostMonitorsResponse =
  PostMonitorsResponses[keyof PostMonitorsResponses];

export type DeleteMonitorsByIdData = {
  body?: never;
  path: {
    /**
     * Monitor ID
     */
    id: string;
  };
  query?: never;
  url: "/monitors/{id}";
};

export type DeleteMonitorsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type DeleteMonitorsByIdError =
  DeleteMonitorsByIdErrors[keyof DeleteMonitorsByIdErrors];

export type DeleteMonitorsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseAny;
};

export type DeleteMonitorsByIdResponse =
  DeleteMonitorsByIdResponses[keyof DeleteMonitorsByIdResponses];

export type GetMonitorsByIdData = {
  body?: never;
  path: {
    /**
     * Monitor ID
     */
    id: string;
  };
  query?: never;
  url: "/monitors/{id}";
};

export type GetMonitorsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetMonitorsByIdError =
  GetMonitorsByIdErrors[keyof GetMonitorsByIdErrors];

export type GetMonitorsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseMonitorMonitorResponseDto;
};

export type GetMonitorsByIdResponse =
  GetMonitorsByIdResponses[keyof GetMonitorsByIdResponses];

export type PatchMonitorsByIdData = {
  /**
   * Monitor object
   */
  body: MonitorPartialUpdateDto;
  path: {
    /**
     * Monitor ID
     */
    id: string;
  };
  query?: never;
  url: "/monitors/{id}";
};

export type PatchMonitorsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PatchMonitorsByIdError =
  PatchMonitorsByIdErrors[keyof PatchMonitorsByIdErrors];

export type PatchMonitorsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseMonitorModel;
};

export type PatchMonitorsByIdResponse =
  PatchMonitorsByIdResponses[keyof PatchMonitorsByIdResponses];

export type PutMonitorsByIdData = {
  /**
   * Monitor object
   */
  body: MonitorCreateUpdateDto;
  path: {
    /**
     * Monitor ID
     */
    id: string;
  };
  query?: never;
  url: "/monitors/{id}";
};

export type PutMonitorsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PutMonitorsByIdError =
  PutMonitorsByIdErrors[keyof PutMonitorsByIdErrors];

export type PutMonitorsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseMonitorModel;
};

export type PutMonitorsByIdResponse =
  PutMonitorsByIdResponses[keyof PutMonitorsByIdResponses];

export type GetMonitorsByIdChartpointsData = {
  body?: never;
  path: {
    /**
     * Monitor ID
     */
    id: string;
  };
  query: {
    /**
     * Time period (30m, 3h, 6h, 24h, 1week)
     */
    period: "30m" | "3h" | "6h" | "24h" | "1week";
  };
  url: "/monitors/{id}/chartpoints";
};

export type GetMonitorsByIdChartpointsErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetMonitorsByIdChartpointsError =
  GetMonitorsByIdChartpointsErrors[keyof GetMonitorsByIdChartpointsErrors];

export type GetMonitorsByIdChartpointsResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseArrayHeartbeatChartPoint;
};

export type GetMonitorsByIdChartpointsResponse =
  GetMonitorsByIdChartpointsResponses[keyof GetMonitorsByIdChartpointsResponses];

export type GetMonitorsByIdHeartbeatsData = {
  body?: never;
  path: {
    /**
     * Monitor ID
     */
    id: string;
  };
  query?: {
    /**
     * Number of heartbeats per page (default 50)
     */
    limit?: number;
    /**
     * Page number (default 0)
     */
    page?: number;
    /**
     * Filter by important heartbeats only
     */
    important?: boolean;
    /**
     * Reverse the order of heartbeats
     */
    reverse?: boolean;
  };
  url: "/monitors/{id}/heartbeats";
};

export type GetMonitorsByIdHeartbeatsErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetMonitorsByIdHeartbeatsError =
  GetMonitorsByIdHeartbeatsErrors[keyof GetMonitorsByIdHeartbeatsErrors];

export type GetMonitorsByIdHeartbeatsResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseArrayHeartbeatModel;
};

export type GetMonitorsByIdHeartbeatsResponse =
  GetMonitorsByIdHeartbeatsResponses[keyof GetMonitorsByIdHeartbeatsResponses];

export type GetMonitorsByIdUptimeData = {
  body?: never;
  path: {
    /**
     * Monitor ID
     */
    id: string;
  };
  query?: never;
  url: "/monitors/{id}/uptime";
};

export type GetMonitorsByIdUptimeErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetMonitorsByIdUptimeError =
  GetMonitorsByIdUptimeErrors[keyof GetMonitorsByIdUptimeErrors];

export type GetMonitorsByIdUptimeResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseMonitorUptimeStatsDto;
};

export type GetMonitorsByIdUptimeResponse =
  GetMonitorsByIdUptimeResponses[keyof GetMonitorsByIdUptimeResponses];

export type GetNotificationsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Search query
     */
    q?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Items per page
     */
    limit?: number;
  };
  url: "/notifications";
};

export type GetNotificationsErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetNotificationsError =
  GetNotificationsErrors[keyof GetNotificationsErrors];

export type GetNotificationsResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseArrayNotificationModel;
};

export type GetNotificationsResponse =
  GetNotificationsResponses[keyof GetNotificationsResponses];

export type PostNotificationsData = {
  /**
   * Notification object
   */
  body: NotificationCreateUpdateDto;
  path?: never;
  query?: never;
  url: "/notifications";
};

export type PostNotificationsErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostNotificationsError =
  PostNotificationsErrors[keyof PostNotificationsErrors];

export type PostNotificationsResponses = {
  /**
   * Created
   */
  201: UtilsApiResponseNotificationModel;
};

export type PostNotificationsResponse =
  PostNotificationsResponses[keyof PostNotificationsResponses];

export type DeleteNotificationsByIdData = {
  body?: never;
  path: {
    /**
     * Notification ID
     */
    id: string;
  };
  query?: never;
  url: "/notifications/{id}";
};

export type DeleteNotificationsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type DeleteNotificationsByIdError =
  DeleteNotificationsByIdErrors[keyof DeleteNotificationsByIdErrors];

export type DeleteNotificationsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseAny;
};

export type DeleteNotificationsByIdResponse =
  DeleteNotificationsByIdResponses[keyof DeleteNotificationsByIdResponses];

export type GetNotificationsByIdData = {
  body?: never;
  path: {
    /**
     * Notification ID
     */
    id: string;
  };
  query?: never;
  url: "/notifications/{id}";
};

export type GetNotificationsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetNotificationsByIdError =
  GetNotificationsByIdErrors[keyof GetNotificationsByIdErrors];

export type GetNotificationsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseNotificationModel;
};

export type GetNotificationsByIdResponse =
  GetNotificationsByIdResponses[keyof GetNotificationsByIdResponses];

export type PatchNotificationsByIdData = {
  /**
   * Notification object
   */
  body: NotificationPartialUpdateDto;
  path: {
    /**
     * Notification ID
     */
    id: string;
  };
  query?: never;
  url: "/notifications/{id}";
};

export type PatchNotificationsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PatchNotificationsByIdError =
  PatchNotificationsByIdErrors[keyof PatchNotificationsByIdErrors];

export type PatchNotificationsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseNotificationModel;
};

export type PatchNotificationsByIdResponse =
  PatchNotificationsByIdResponses[keyof PatchNotificationsByIdResponses];

export type PutNotificationsByIdData = {
  /**
   * Notification object
   */
  body: NotificationCreateUpdateDto;
  path: {
    /**
     * Notification ID
     */
    id: string;
  };
  query?: never;
  url: "/notifications/{id}";
};

export type PutNotificationsByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PutNotificationsByIdError =
  PutNotificationsByIdErrors[keyof PutNotificationsByIdErrors];

export type PutNotificationsByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseNotificationModel;
};

export type PutNotificationsByIdResponse =
  PutNotificationsByIdResponses[keyof PutNotificationsByIdResponses];

export type GetProxiesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Search query
     */
    q?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Items per page
     */
    limit?: number;
  };
  url: "/proxies";
};

export type GetProxiesErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetProxiesError = GetProxiesErrors[keyof GetProxiesErrors];

export type GetProxiesResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseArrayProxyModel;
};

export type GetProxiesResponse = GetProxiesResponses[keyof GetProxiesResponses];

export type PostProxiesData = {
  /**
   * Proxy object
   */
  body: ProxyCreateUpdateDto;
  path?: never;
  query?: never;
  url: "/proxies";
};

export type PostProxiesErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PostProxiesError = PostProxiesErrors[keyof PostProxiesErrors];

export type PostProxiesResponses = {
  /**
   * Created
   */
  201: UtilsApiResponseProxyModel;
};

export type PostProxiesResponse =
  PostProxiesResponses[keyof PostProxiesResponses];

export type DeleteProxiesByIdData = {
  body?: never;
  path: {
    /**
     * Proxy ID
     */
    id: string;
  };
  query?: never;
  url: "/proxies/{id}";
};

export type DeleteProxiesByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type DeleteProxiesByIdError =
  DeleteProxiesByIdErrors[keyof DeleteProxiesByIdErrors];

export type DeleteProxiesByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseAny;
};

export type DeleteProxiesByIdResponse =
  DeleteProxiesByIdResponses[keyof DeleteProxiesByIdResponses];

export type GetProxiesByIdData = {
  body?: never;
  path: {
    /**
     * Proxy ID
     */
    id: string;
  };
  query?: never;
  url: "/proxies/{id}";
};

export type GetProxiesByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type GetProxiesByIdError =
  GetProxiesByIdErrors[keyof GetProxiesByIdErrors];

export type GetProxiesByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseProxyModel;
};

export type GetProxiesByIdResponse =
  GetProxiesByIdResponses[keyof GetProxiesByIdResponses];

export type PatchProxiesByIdData = {
  /**
   * Proxy object
   */
  body: ProxyPartialUpdateDto;
  path: {
    /**
     * Proxy ID
     */
    id: string;
  };
  query?: never;
  url: "/proxies/{id}";
};

export type PatchProxiesByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PatchProxiesByIdError =
  PatchProxiesByIdErrors[keyof PatchProxiesByIdErrors];

export type PatchProxiesByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseProxyModel;
};

export type PatchProxiesByIdResponse =
  PatchProxiesByIdResponses[keyof PatchProxiesByIdResponses];

export type PutProxiesByIdData = {
  /**
   * Proxy object
   */
  body: ProxyCreateUpdateDto;
  path: {
    /**
     * Proxy ID
     */
    id: string;
  };
  query?: never;
  url: "/proxies/{id}";
};

export type PutProxiesByIdErrors = {
  /**
   * Bad Request
   */
  400: UtilsApiError;
  /**
   * Not Found
   */
  404: UtilsApiError;
  /**
   * Internal Server Error
   */
  500: UtilsApiError;
};

export type PutProxiesByIdError =
  PutProxiesByIdErrors[keyof PutProxiesByIdErrors];

export type PutProxiesByIdResponses = {
  /**
   * OK
   */
  200: UtilsApiResponseProxyModel;
};

export type PutProxiesByIdResponse =
  PutProxiesByIdResponses[keyof PutProxiesByIdResponses];

export type ClientOptions = {
  baseURL: "localhost:8033/api/v1" | (string & {});
};
