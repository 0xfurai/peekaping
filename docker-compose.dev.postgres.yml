networks:
  appnet:

services:
  postgres:
    image: postgres:17
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-password}
      POSTGRES_DB: ${DB_NAME:-peekaping}
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-peekaping}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - appnet

  migrate:
    build:
      context: ./apps/server
      dockerfile: Dockerfile.migrate
    restart: "no"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_TYPE=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - appnet

  server:
    build:
      context: ./apps/server
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8034:8034"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_TYPE=postgres
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - appnet

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: unless-stopped
    ports:
      - "8383:80"
    depends_on:
      - server
    environment:
      - API_URL=http://localhost:8034
    networks:
      - appnet

  redis:
    image: redis:7
    restart: always
    ports:
      - "6381:6379"
    networks:
      - appnet
