name: Reusable Playwright Tests

on:
  workflow_call:
    inputs:
      timeout-minutes:
        description: 'Timeout in minutes for the test job'
        required: false
        type: number
        default: 300
      container-tag:
        description: 'Container tag to test (e.g., latest, 1.2.3-rc.1)'
        required: false
        type: string
        default: 'latest'

jobs:
  playwright-tests:
    timeout-minutes: ${{ inputs.timeout-minutes }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        database: [postgres, mongo, sqlite]
    steps:
    # prepare environment and dependencies
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm install -g pnpm && pnpm install
    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps

    # prepare services
    - name: Create .env file
      run: cp .env.prod.example .env

    - name: Update docker-compose file with container tag
      run: |
        # Create a temporary docker-compose file with the specified container tag
        cp docker-compose.prod.${{ matrix.database }}.yml docker-compose.test.${{ matrix.database }}.yml

        # Replace container tags with the specified version
        sed -i 's|0xfurai/peekaping-api:latest|0xfurai/peekaping-api:${{ inputs.container-tag }}|g' docker-compose.test.${{ matrix.database }}.yml
        sed -i 's|0xfurai/peekaping-producer:latest|0xfurai/peekaping-producer:${{ inputs.container-tag }}|g' docker-compose.test.${{ matrix.database }}.yml
        sed -i 's|0xfurai/peekaping-worker:latest|0xfurai/peekaping-worker:${{ inputs.container-tag }}|g' docker-compose.test.${{ matrix.database }}.yml
        sed -i 's|0xfurai/peekaping-ingester:latest|0xfurai/peekaping-ingester:${{ inputs.container-tag }}|g' docker-compose.test.${{ matrix.database }}.yml
        sed -i 's|0xfurai/peekaping-web:latest|0xfurai/peekaping-web:${{ inputs.container-tag }}|g' docker-compose.test.${{ matrix.database }}.yml
        sed -i 's|0xfurai/peekaping-migrate:latest|0xfurai/peekaping-migrate:${{ inputs.container-tag }}|g' docker-compose.test.${{ matrix.database }}.yml

        echo "=== Modified docker-compose file ==="
        cat docker-compose.test.${{ matrix.database }}.yml

    - name: Start services
      run: |
        if ! docker compose -f docker-compose.test.${{ matrix.database }}.yml up -d; then
          echo "=== Service startup failed! Showing container logs ==="
          docker compose -f docker-compose.test.${{ matrix.database }}.yml ps
          echo "=== Container Logs ==="
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs
          echo "=== Individual Service Logs ==="
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs migrate || echo "No migrate service logs"
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs api || echo "No api service logs"
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs producer || echo "No producer service logs"
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs worker || echo "No worker service logs"
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs ingester || echo "No ingester service logs"
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs web || echo "No web service logs"
          docker compose -f docker-compose.test.${{ matrix.database }}.yml logs gateway || echo "No gateway service logs"
          exit 1
        fi

    - name: Show container logs
      run: |
        echo "=== Container Status ==="
        docker compose -f docker-compose.test.${{ matrix.database }}.yml ps
        echo "=== Container Logs ==="
        docker compose -f docker-compose.test.${{ matrix.database }}.yml logs

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be healthy..."
        timeout 60 bash -c '
          attempt=1
          until curl -f http://localhost:8383/api/v1/health; do
            echo "Attempt $attempt: Health check failed, retrying in 1 second..."
            response=$(curl -s http://localhost:8383/api/v1/health || echo "connection failed")
            status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8383/api/v1/health || echo "000")
            echo "  Status Code: $status_code"
            echo "  Response Body: $response"
            attempt=$((attempt + 1))
            sleep 5
            echo "=== Container Status ==="
            docker compose -f docker-compose.test.${{ matrix.database }}.yml ps
            echo "=== API Logs ==="
            docker compose -f docker-compose.test.${{ matrix.database }}.yml logs api
            echo "=== Producer Logs ==="
            docker compose -f docker-compose.test.${{ matrix.database }}.yml logs producer
            echo "=== Worker Logs ==="
            docker compose -f docker-compose.test.${{ matrix.database }}.yml logs worker
            echo "=== Ingester Logs ==="
            docker compose -f docker-compose.test.${{ matrix.database }}.yml logs ingester
            echo "=== Web Logs ==="
            docker compose -f docker-compose.test.${{ matrix.database }}.yml logs web
            echo "=== Gateway Logs ==="
            docker compose -f docker-compose.test.${{ matrix.database }}.yml logs gateway

          done
        ' || echo "Health check timed out after 60 seconds"
        echo "Health check succeeded! Waiting additional 5 seconds for stability..."
        sleep 5

    - name: Run Playwright tests
      run: pnpm exec playwright test

    - name: Stop services
      if: always()
      run: docker compose -f docker-compose.test.${{ matrix.database }}.yml down

    - name: Cleanup temporary docker-compose file
      if: always()
      run: rm -f docker-compose.test.${{ matrix.database }}.yml

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report-${{ matrix.database }}-${{ inputs.container-tag }}
        path: playwright-report/
        retention-days: 30

  playwright-tests-bundle:
    timeout-minutes: ${{ inputs.timeout-minutes }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        database: [sqlite, mongo, postgres]
    steps:
    # prepare environment and dependencies
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm install -g pnpm && pnpm install
    - name: Install Playwright Browsers
      run: pnpm exec playwright install --with-deps

    # prepare data directories
    - name: Create data directories
      run: |
        mkdir -p ./test-data/${{ matrix.database }}
        case "${{ matrix.database }}" in
          sqlite)
            # SQLite data directory
            mkdir -p ./test-data/sqlite/app
            # Set proper permissions for SQLite database directory
            chmod -R 777 ./test-data/sqlite/app
            ;;
          mongo)
            # MongoDB data directory
            mkdir -p ./test-data/mongo/db
            ;;
          postgres)
            # PostgreSQL data directory
            mkdir -p ./test-data/postgres/data
            ;;
        esac

    - name: Check bundle image availability and determine tag
      id: bundle_tag
      run: |
        # Try to pull the specific tag first
        BUNDLE_TAG="${{ inputs.container-tag }}"
        IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${{ matrix.database }}"

        echo "Checking if ${IMAGE_NAME}:${BUNDLE_TAG} exists..."

        if docker manifest inspect "${IMAGE_NAME}:${BUNDLE_TAG}" >/dev/null 2>&1; then
          echo "✅ Found bundle image with tag: ${BUNDLE_TAG}"
          echo "tag=${BUNDLE_TAG}" >> $GITHUB_OUTPUT
        elif docker manifest inspect "${IMAGE_NAME}:latest" >/dev/null 2>&1; then
          echo "⚠️  Specific tag not found, falling back to latest"
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "❌ No bundle image found for ${{ matrix.database }}"
          echo "Available tags:"
          docker search --limit 5 "${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${{ matrix.database }}" || echo "No public images found"
          exit 1
        fi

    - name: Start bundle container - ${{ matrix.database }}
      run: |
        BUNDLE_TAG="${{ steps.bundle_tag.outputs.tag }}"
        echo "Starting bundle container with tag: ${BUNDLE_TAG}"

        # Common environment variables for all database types
        COMMON_ENV=(
          -e CLIENT_URL=http://localhost:8383
        )

        case "${{ matrix.database }}" in
          sqlite)
            docker run -d \
              --name peekaping-bundle-test-${{ matrix.database }} \
              -p 8383:8383 \
              -v $(pwd)/test-data/sqlite/app:/app/data \
              "${COMMON_ENV[@]}" \
              -e DB_NAME=/app/data/peekaping.db \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${{ matrix.database }}:${BUNDLE_TAG}
            ;;
          mongo)
            docker run -d \
              --name peekaping-bundle-test-${{ matrix.database }} \
              -p 8383:8383 \
              -v $(pwd)/test-data/mongo/db:/data/db \
              "${COMMON_ENV[@]}" \
              -e DB_NAME=peekaping \
              -e DB_USER=peekaping \
              -e DB_PASS=password \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${{ matrix.database }}:${BUNDLE_TAG}
            ;;
          postgres)
            docker run -d \
              --name peekaping-bundle-test-${{ matrix.database }} \
              -p 8383:8383 \
              -v $(pwd)/test-data/postgres/data:/var/lib/postgresql/data \
              "${COMMON_ENV[@]}" \
              -e DB_NAME=peekaping \
              -e DB_USER=peekaping \
              -e DB_PASS=password \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${{ matrix.database }}:${BUNDLE_TAG}
            ;;
        esac

    - name: Show container logs
      run: |
        echo "=== Container Status ==="
        docker ps --filter "name=peekaping-bundle-test-${{ matrix.database }}"
        echo "=== Container Logs ==="
        docker logs peekaping-bundle-test-${{ matrix.database }}
        echo "=== Container Environment ==="
        docker exec peekaping-bundle-test-${{ matrix.database }} env | grep -E "(DB_|API_|JWT_|ACCESS_|REFRESH_|BUNDEBUG)" || echo "No relevant env vars found"
        echo "=== Container Processes ==="
        docker exec peekaping-bundle-test-${{ matrix.database }} ps aux || echo "Could not list processes"
        echo "=== Testing internal connectivity ==="
        docker exec peekaping-bundle-test-${{ matrix.database }} nc -zv localhost 8034 || echo "Go api not responding on port 8034"

    - name: Wait for bundle service to be ready
      run: |
        echo "Waiting for bundle service to be healthy..."
        timeout 120 bash -c '
          attempt=1
          until curl -f http://localhost:8383/api/v1/health; do
            echo "Attempt $attempt: Health check failed, retrying in 5 seconds..."
            response=$(curl -s http://localhost:8383/api/v1/health || echo "connection failed")
            status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8383/api/v1/health || echo "000")
            echo "  Status Code: $status_code"
            echo "  Response Body: $response"
            attempt=$((attempt + 1))
            sleep 5
            if [ $attempt -gt 12 ]; then
              echo "=== Container Status ==="
              docker ps --filter "name=peekaping-bundle-test-${{ matrix.database }}"
              echo "=== Container Logs ==="
              docker logs peekaping-bundle-test-${{ matrix.database }}
            fi
          done
        ' || echo "Health check timed out after 120 seconds"
        echo "Health check succeeded! Waiting additional 5 seconds for stability..."
        sleep 5

    - name: Run Playwright tests against bundle
      run: PLAYWRIGHT_BASE_URL=http://localhost:8383 pnpm exec playwright test

    - name: Show final container logs on failure
      if: failure()
      run: |
        echo "=== Final Container Status ==="
        docker ps --filter "name=peekaping-bundle-test-${{ matrix.database }}"
        echo "=== Final Container Logs ==="
        docker logs peekaping-bundle-test-${{ matrix.database }}
        echo "=== Final Container Environment ==="
        docker exec peekaping-bundle-test-${{ matrix.database }} env | grep -E "(DB_|API_|JWT_|ACCESS_|REFRESH_|BUNDEBUG)" || echo "No relevant env vars found"
        echo "=== Final Container Processes ==="
        docker exec peekaping-bundle-test-${{ matrix.database }} ps aux || echo "Could not list processes"
        echo "=== Final internal connectivity test ==="
        docker exec peekaping-bundle-test-${{ matrix.database }} nc -zv localhost 8034 || echo "Go api not responding on port 8034"

    - name: Stop bundle container
      if: always()
      run: |
        docker stop peekaping-bundle-test-${{ matrix.database }} || true
        docker rm peekaping-bundle-test-${{ matrix.database }} || true

    - name: Cleanup test data
      if: always()
      run: sudo rm -rf ./test-data

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report-bundle-${{ matrix.database }}-${{ inputs.container-tag }}
        path: playwright-report/
        retention-days: 30
