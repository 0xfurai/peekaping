name: Build Release Candidate

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Candidate Version (e.g. 1.2.3-rc.1)'
        required: true
        type: string
      changelog:
        description: 'Changelog for this release candidate'
        required: false
        type: string
        default: 'Release candidate build'
  workflow_call:
    inputs:
      version:
        description: 'Release Candidate Version (e.g. 1.2.3-rc.1)'
        required: true
        type: string
      changelog:
        description: 'Changelog for this release candidate'
        required: false
        type: string
        default: 'Release candidate build'

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      is_valid_rc: ${{ steps.check.outputs.is_valid_rc }}
    steps:
      - name: Validate RC version format
        id: check
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
            echo "is_valid_rc=true" >> $GITHUB_OUTPUT
            echo "✅ Valid RC version format: ${{ github.event.inputs.version }}"
          else
            echo "is_valid_rc=false" >> $GITHUB_OUTPUT
            echo "❌ Invalid RC version format. Expected format: X.Y.Z-rc.N (e.g., 1.2.3-rc.1)"
            exit 1
          fi

  build-and-release:
    runs-on: ${{ matrix.runner }}
    needs: validate-version
    if: needs.validate-version.outputs.is_valid_rc == 'true'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0
          run_install: false

      - name: Update version in package.json (web) - temp
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
        working-directory: ./apps/web

      - name: Update version in main.go (server) - temp
        run: |
          sed -i.bak -E 's/(Version[[:space:]]*=[[:space:]]*")[^"]+(")/\1${{ github.event.inputs.version }}\2/' version.go
          rm version.go.bak
        working-directory: ./apps/server/internal/version

      - name: Write version.ts for web - temp
        run: |
          echo "// This file is auto-generated by the release candidate workflow" > src/version.ts
          echo "export const VERSION = \"${{ github.event.inputs.version }}\";" >> src/version.ts
        working-directory: ./apps/web

      - name: Run tests (amd64 only)
        if: matrix.arch == 'amd64'
        run: |
          pnpm install --frozen-lockfile
          pnpm --filter web lint
          pnpm --filter web build

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run server tests (amd64 only)
        if: matrix.arch == 'amd64'
        working-directory: apps/server
        run: |
          go mod download
          go test -v ./internal/...

      - name: Build and push UI image
        id: build_ui
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}-${{ matrix.arch }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API image
        id: build_api
        uses: docker/build-push-action@v6
        with:
          context: ./apps/server
          file: ./apps/server/infra/Dockerfile.api
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}-${{ matrix.arch }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Worker image
        id: build_worker
        uses: docker/build-push-action@v6
        with:
          context: ./apps/server
          file: ./apps/server/infra/Dockerfile.worker
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}-${{ matrix.arch }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Producer image
        id: build_producer
        uses: docker/build-push-action@v6
        with:
          context: ./apps/server
          file: ./apps/server/infra/Dockerfile.producer
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}-${{ matrix.arch }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Ingester image
        id: build_ingester
        uses: docker/build-push-action@v6
        with:
          context: ./apps/server
          file: ./apps/server/infra/Dockerfile.ingester
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}-${{ matrix.arch }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Migrate image
        id: build_migrate
        uses: docker/build-push-action@v6
        with:
          context: ./apps/server
          file: ./apps/server/infra/Dockerfile.migrate
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}-${{ matrix.arch }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-bundle-containers:
    runs-on: ${{ matrix.runner }}
    needs: validate-version
    if: needs.validate-version.outputs.is_valid_rc == 'true'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
            database: sqlite
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
            database: sqlite
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
            database: mongo
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
            database: mongo
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
            database: postgres
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
            database: postgres
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Update version in package.json (web) - temp
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
        working-directory: ./apps/web

      - name: Update version in main.go (server) - temp
        run: |
          sed -i.bak -E 's/(Version[[:space:]]*=[[:space:]]*")[^"]+(")/\1${{ github.event.inputs.version }}\2/' version.go
          rm version.go.bak
        working-directory: ./apps/server/internal/version

      - name: Write version.ts for web - temp
        run: |
          echo "// This file is auto-generated by the release candidate workflow" > src/version.ts
          echo "export const VERSION = \"${{ github.event.inputs.version }}\";" >> src/version.ts
        working-directory: ./apps/web

      - name: Build and push Bundle image - ${{ matrix.database }}
        id: build_bundle
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.bundle.${{ matrix.database }}
          push: true
          platforms: ${{ matrix.platform }}
          provenance: false
          sbom: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${{ matrix.database }}:${{ github.event.inputs.version }}-${{ matrix.arch }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-${{ matrix.database }}:${{ github.event.inputs.version }}-${{ matrix.arch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    runs-on: ubuntu-latest
    needs: [build-and-release, build-bundle-containers]
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifests for GHCR
        run: |
          # UI manifest
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }} \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}

          # API manifest
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }} \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}

          # Worker manifest
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }} \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}

          # Producer manifest
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }} \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}

          # Ingester manifest
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }} \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}

          # Migrate manifest
          docker manifest create --amend ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }} \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}-amd64 \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}-arm64
          docker manifest push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}

          # Bundle manifests
          for db in sqlite mongo postgres; do
            # Bundle manifest for each database
            docker manifest create --amend ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }} \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }}-amd64 \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }}-arm64
            docker manifest push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }}
          done

      - name: Create and push multi-arch manifests for Docker Hub
        run: |
          # UI manifest
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}

          # API manifest
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}

          # Worker manifest
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}

          # Producer manifest
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}

          # Ingester manifest
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}

          # Migrate manifest
          docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}-amd64 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}-arm64
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}

          # Bundle manifests
          for db in sqlite mongo postgres; do
            # Bundle manifest for each database
            docker manifest create --amend ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }}-amd64 \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }}-arm64
            docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-${db}:${{ github.event.inputs.version }}
          done

  playwright-tests:
    needs: create-manifest
    uses: ./.github/workflows/playwright-reusable.yml
    with:
      container-tag: ${{ github.event.inputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: playwright-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Pre-Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: "Release Candidate ${{ github.event.inputs.version }}"
          prerelease: true
          target_commitish: ${{ github.ref_name }}
          body: |
            🚀 **Release Candidate ${{ github.event.inputs.version }}**

            ${{ github.event.inputs.changelog }}

            > ⚠️ **This is a pre-release version intended for testing purposes.**
            > Do not use in production environments.

            ## Docker Images

            ### GitHub Container Registry (GHCR)
            - UI: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}`
            - API: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}`
            - Worker: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}`
            - Producer: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}`
            - Ingester: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}`
            - Migrate: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}`

            ### Bundle Containers (GHCR)
            - SQLite Bundle: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-sqlite:${{ github.event.inputs.version }}`
            - MongoDB Bundle: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-mongo:${{ github.event.inputs.version }}`
            - PostgreSQL Bundle: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-postgres:${{ github.event.inputs.version }}`

            ### Docker Hub
            - UI: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}`
            - API: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}`
            - Worker: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}`
            - Producer: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}`
            - Ingester: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}`
            - Migrate: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}`

            ### Bundle Containers (Docker Hub)
            - SQLite Bundle: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-sqlite:${{ github.event.inputs.version }}`
            - MongoDB Bundle: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-mongo:${{ github.event.inputs.version }}`
            - PostgreSQL Bundle: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-bundle-postgres:${{ github.event.inputs.version }}`

            ## Installation

            ```bash
            # Using regular docker-compose, update your images to:
            # - UI: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}
            # - API: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}
            # - Worker: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}
            # - Producer: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}
            # - Ingester: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}
            # - Migrate: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}

            # Using bundle containers (single container with everything):
            docker run -d --name peekaping-sqlite \
              -p 8383:8383 \
              -v ./data:/app/data \
              ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-sqlite:${{ github.event.inputs.version }}
            ```

            Built from branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on associated PR (if exists)
        uses: actions/github-script@v7
        with:
          script: |
            // Try to find PR associated with the current branch
            if ('${{ github.ref_name }}' !== 'main' && '${{ github.ref_name }}' !== 'master') {
              try {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${{ github.ref_name }}`,
                  state: 'open'
                });

                if (prs.length > 0) {
                  const pr = prs[0];
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: `🚀 **Release Candidate Built: \`${{ github.event.inputs.version }}\`**

                    The release candidate has been successfully built and published!

                    **Docker Images:**
                    - UI: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}\`
                    - API: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-api:${{ github.event.inputs.version }}\`
                    - Worker: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-worker:${{ github.event.inputs.version }}\`
                    - Producer: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-producer:${{ github.event.inputs.version }}\`
                    - Ingester: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-ingester:${{ github.event.inputs.version }}\`
                    - Migrate: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}\`

                    **Bundle Containers:**
                    - SQLite: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-sqlite:${{ github.event.inputs.version }}\`
                    - MongoDB: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-mongo:${{ github.event.inputs.version }}\`
                    - PostgreSQL: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-bundle-postgres:${{ github.event.inputs.version }}\`

                    [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }})`
                  });
                }
              } catch (error) {
                console.log('No PR found or error commenting:', error.message);
              }
            }
