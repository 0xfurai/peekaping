name: Build Release Candidate

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Candidate Version (e.g. 1.2.3-rc.1)'
        required: true
        type: string
      changelog:
        description: 'Changelog for this release candidate'
        required: false
        type: string
        default: 'Release candidate build'
  workflow_call:
    inputs:
      version:
        description: 'Release Candidate Version (e.g. 1.2.3-rc.1)'
        required: true
        type: string
      changelog:
        description: 'Changelog for this release candidate'
        required: false
        type: string
        default: 'Release candidate build'

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      is_valid_rc: ${{ steps.check.outputs.is_valid_rc }}
    steps:
      - name: Validate RC version format
        id: check
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
            echo "is_valid_rc=true" >> $GITHUB_OUTPUT
            echo "✅ Valid RC version format: ${{ github.event.inputs.version }}"
          else
            echo "is_valid_rc=false" >> $GITHUB_OUTPUT
            echo "❌ Invalid RC version format. Expected format: X.Y.Z-rc.N (e.g., 1.2.3-rc.1)"
            exit 1
          fi

  build-and-release:
    runs-on: ubuntu-latest
    needs: validate-version
    if: needs.validate-version.outputs.is_valid_rc == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.0
          run_install: false

      - name: Update version in package.json (web) - temp
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
        working-directory: ./apps/web

      - name: Update version in main.go (server) - temp
        run: |
          sed -i.bak -E 's/(Version\s*=\s*")[^"]+(")/\1${{ github.event.inputs.version }}\2/' version.go
          rm version.go.bak
        working-directory: ./apps/server/src

      - name: Write version.ts for web - temp
        run: |
          echo "// This file is auto-generated by the release candidate workflow" > src/version.ts
          echo "export const VERSION = \"${{ github.event.inputs.version }}\";" >> src/version.ts
        working-directory: ./apps/web

      - name: Run tests
        run: |
          pnpm install --frozen-lockfile
          pnpm --filter web lint
          pnpm --filter web build

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run server tests
        working-directory: apps/server
        run: |
          go mod download
          go test -v ./src/...

      - name: Build and push UI image
        id: build_ui
        uses: docker/build-push-action@v6
        with:
          context: ./apps/web
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Server image
        id: build_server
        uses: docker/build-push-action@v6
        with:
          context: ./apps/server
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-server:${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-server:${{ github.event.inputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Migrate image
        id: build_migrate
        uses: docker/build-push-action@v6
        with:
          context: ./apps/server
          file: ./apps/server/Dockerfile.migrate
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Pre-Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: "Release Candidate ${{ github.event.inputs.version }}"
          prerelease: true
          target_commitish: ${{ github.ref_name }}
          body: |
            🚀 **Release Candidate ${{ github.event.inputs.version }}**

            ${{ github.event.inputs.changelog }}

            > ⚠️ **This is a pre-release version intended for testing purposes.**
            > Do not use in production environments.

            ## Docker Images

            ### GitHub Container Registry (GHCR)
            - UI: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}`
            - Server: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-server:${{ github.event.inputs.version }}`
            - Migrate: `ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}`

            ### Docker Hub
            - UI: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}`
            - Server: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-server:${{ github.event.inputs.version }}`
            - Migrate: `${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}`

            ## Installation

            ```bash
            # Using docker-compose, update your images to:
            # - UI: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}
            # - Server: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-server:${{ github.event.inputs.version }}
            # - Migrate: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}
            ```

            Built from branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on associated PR (if exists)
        uses: actions/github-script@v7
        with:
          script: |
            // Try to find PR associated with the current branch
            if ('${{ github.ref_name }}' !== 'main' && '${{ github.ref_name }}' !== 'master') {
              try {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${{ github.ref_name }}`,
                  state: 'open'
                });

                if (prs.length > 0) {
                  const pr = prs[0];
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    body: `🚀 **Release Candidate Built: \`${{ github.event.inputs.version }}\`**

                    The release candidate has been successfully built and published!

                    **Docker Images:**
                    - UI: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-web:${{ github.event.inputs.version }}\`
                    - Server: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-server:${{ github.event.inputs.version }}\`
                    - Migrate: \`ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-migrate:${{ github.event.inputs.version }}\`

                    [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version }})`
                  });
                }
              } catch (error) {
                console.log('No PR found or error commenting:', error.message);
              }
            }
