# Multi-stage Dockerfile to build server, web, and migrations in one container with SQLite

# Stage 1: Build Go server and migration tool
FROM golang:1.24.3-alpine AS go-builder

# Install build dependencies
RUN apk add --no-cache git

# Set the Current Working Directory inside the container
WORKDIR /app/server

# Copy go mod and sum files
COPY apps/server/go.mod apps/server/go.sum ./

# Download all dependencies
RUN go mod download

# Copy the source code into the container
COPY apps/server/ .

# Build the Go server
RUN go build -o main ./cmd/server

# Build the migration tool
RUN go build -o bun ./cmd/bun

# Stage 2: Build React web app
FROM node:22-alpine AS web-builder

WORKDIR /app

# Copy workspace configuration files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy patches directory
COPY patches/ ./patches/

# Copy web app package.json
COPY apps/web/package.json ./apps/web/package.json

# Install dependencies using workspace (filter for web app only)
RUN npm install -g pnpm && pnpm install --filter=web

# Copy web app source code
COPY apps/web/ ./apps/web/

# Build the web app
WORKDIR /app/apps/web
RUN pnpm run build

# Stage 3: Final runtime image
FROM caddy:alpine

# Install supervisor to manage multiple processes
RUN apk add --no-cache supervisor netcat-openbsd

# Create necessary directories
RUN mkdir -p /app/server /app/data /var/log/supervisor /app/web

# Copy Go server and migration tool from go-builder
COPY --from=go-builder /app/server/main /app/server/main
COPY --from=go-builder /app/server/bun /app/server/bun

# Copy migration files and scripts
COPY --from=go-builder /app/server/cmd/bun/migrations /app/server/cmd/bun/migrations
COPY --from=go-builder /app/server/src/config /app/server/src/config
COPY --from=go-builder /app/server/scripts/run-migrations.sh /app/server/run-migrations.sh

# Copy built web assets
COPY --from=web-builder /app/apps/web/dist /app/web

# Copy Caddy configuration
COPY Caddyfile /etc/caddy/Caddyfile

# Copy supervisor configuration for SQLite
COPY supervisord.bundle.sqlite.conf /etc/supervisor/conf.d/supervisord.conf

# Copy startup script
COPY startup.bundle.sqlite.sh /app/startup.sh

# Make scripts executable
RUN chmod +x /app/server/run-migrations.sh /app/startup.sh /app/server/main /app/server/bun

# Expose port 8383 (matches your current setup)
EXPOSE 8383

# Use our startup script
CMD ["/app/startup.sh"]
